model Manga {
    id                 Int                  @id @default(autoincrement())
    urlId              String               @unique @default(uuid()) @db.VarChar(255)
    title              MangaTitle?
    otherTitles        MangaOtherTitles[]
    description        MangaDescription?
    releaseDate        DateTime?
    type               MangaType            @default(Manga)
    status             BookStatus           @default(Ongoing)
    ageRate            Int                  @default(0) // ! deprecated
    ageRating          Int                  @default(0)
    covers             MangaCovers[]
    owner              User                 @relation(fields: [ownerId], references: [id])
    ownerId            Int
    banner             String?
    genres             Int[]
    tags               Int[]
    relatedManga       Int[] // ! deprecated
    related            MangaRelated?
    rating             MangaRating[]
    comments           MangaComments[]
    bookmarks          UserMangaBookmarks[]
    authors            Authors[]
    artists            Artists[]
    publishers         Publishers[]
    chapters           Chapters[]
    progressReadManga  ProgressReadManga[]
    statistic          MangaStatistic?
    moderated          Boolean              @default(false)
    lastChapterAddedAt DateTime             @default(now())
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @default(now()) @updatedAt
}

model MangaTitle {
    id        Int      @id @default(autoincrement())
    ru        String
    en        String?
    origin    String?
    manga     Manga    @relation(fields: [mangaId], references: [id])
    mangaId   Int      @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model MangaOtherTitles {
    id        Int      @id @default(autoincrement())
    title     String
    manga     Manga    @relation(fields: [mangaId], references: [id])
    mangaId   Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model MangaDescription {
    id        Int      @id @default(autoincrement())
    ru        String
    en        String?
    manga     Manga    @relation(fields: [mangaId], references: [id])
    mangaId   Int      @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model MangaCovers {
    id        Int      @id @default(autoincrement())
    cover     String
    main      Boolean  @default(false)
    manga     Manga    @relation(fields: [mangaId], references: [id])
    mangaId   Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model MangaGenres {
    id        Int      @id @default(autoincrement())
    ru        String   @unique
    en        String?  @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model MangaTags {
    id        Int      @id @default(autoincrement())
    ru        String   @unique
    en        String?  @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model MangaRating {
    id        String   @id
    rate      Int
    manga     Manga    @relation(fields: [mangaId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    mangaId   Int
    userId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model MangaComments {
    id            Int                    @id @default(autoincrement())
    content       String
    manga         Manga                  @relation(fields: [mangaId], references: [id])
    user          User                   @relation(fields: [userId], references: [id])
    mangaId       Int
    userId        Int
    usersLike     UserLikeMangaComment[]
    predesessorId Int?
    predecessor   MangaComments?         @relation("MangaCommentFamily", fields: [predesessorId], references: [id])
    successors    MangaComments[]        @relation("MangaCommentFamily")
    createdAt     DateTime               @default(now())
    updatedAt     DateTime               @default(now()) @updatedAt
}

model UserLikeMangaComment {
    id             Int           @id @default(autoincrement())
    mangaComment   MangaComments @relation(fields: [mangaCommentId], references: [id])
    user           User          @relation(fields: [userId], references: [id])
    mangaCommentId Int
    userId         Int
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @default(now()) @updatedAt
}

model UserMangaBookmarks {
    id        String    @id
    manga     Manga     @relation(fields: [mangaId], references: [id])
    user      User      @relation(fields: [userId], references: [id])
    bookmark  Bookmarks @default(Reading)
    mangaId   Int
    userId    Int
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
}

model ProgressReadManga {
    id            String   @id
    manga         Manga    @relation(fields: [mangaId], references: [id])
    user          User     @relation(fields: [userId], references: [id])
    lastChapter   Chapters @relation(fields: [lastChapterId], references: [id])
    lastChapterId Int
    mangaId       Int
    userId        Int
    show          Boolean  @default(true)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now()) @updatedAt
}

model MangaStatistic {
    id                Int      @id @default(autoincrement())
    rate              Float    @default(0)
    views             Int      @default(0)
    likes             Int      @default(0)
    rateCount         Int      @default(0)
    chapterCount      Int      @default(0)
    rateStatistic     Json     @default("{}")
    bookmarkStatistic Json     @default("{}")
    manga             Manga    @relation(fields: [mangaId], references: [id])
    mangaId           Int      @unique
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt
}

// * add in edit manga
model MangaRelated {
    id        Int      @id @default(autoincrement())
    manga     Json     @default("{}")
    ranobe    Json     @default("{}")
    book      Manga    @relation(fields: [bookId], references: [id])
    bookId    Int      @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

enum MangaType {
    Manga
    Manhwa
    Manhua
    OEL
    Rumanga
    Comic
}

// ! deprecated
enum MangaStatus {
    Ongoing
    Announced
    Completed
    Frozen
    Canceled
}
