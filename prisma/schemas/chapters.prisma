model Chapters {
    id                Int                 @id @default(autoincrement())
    title             ChapterTitle?
    tome              Int                 @default(1)
    chapter           Float
    pages             ChapterPages?
    private           Boolean             @default(true)
    manga             Manga               @relation(fields: [mangaId], references: [id])
    mangaId           Int
    comments          ChapterComments[]
    usersLike         UserLikeChapter[]
    usersView         UserViewChapter[]
    progressReadManga ProgressReadManga[]
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @default(now()) @updatedAt
}

model ChapterTitle {
    id        Int      @id @default(autoincrement())
    ru        String?
    en        String?
    chapter   Chapters @relation(fields: [chapterId], references: [id])
    chapterId Int      @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model ChapterPages {
    id        Int      @id @default(autoincrement())
    ru        Json     @default("{}")
    en        Json     @default("{}")
    chapter   Chapters @relation(fields: [chapterId], references: [id])
    chapterId Int      @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model UserLikeChapter {
    id        String   @id
    chapter   Chapters @relation(fields: [chapterId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    chapterId Int
    userId    Int
    isLiked   Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model UserViewChapter {
    id        String   @id
    chapter   Chapters @relation(fields: [chapterId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    chapterId Int
    userId    Int
    isViewed  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model ChapterComments {
    id            Int                      @id @default(autoincrement())
    content       String
    page          Int
    chapter       Chapters                 @relation(fields: [chapterId], references: [id])
    user          User                     @relation(fields: [userId], references: [id])
    chapterId     Int
    userId        Int
    usersLike     UserLikeChapterComment[]
    predesessorId Int?
    predecessor   ChapterComments?         @relation("ChapterCommentFamily", fields: [predesessorId], references: [id])
    successors    ChapterComments[]        @relation("ChapterCommentFamily")
    createdAt     DateTime                 @default(now())
    updatedAt     DateTime                 @default(now()) @updatedAt
}

model UserLikeChapterComment {
    id               Int             @id @default(autoincrement())
    chapterComment   ChapterComments @relation(fields: [chapterCommentId], references: [id])
    user             User            @relation(fields: [userId], references: [id])
    chapterCommentId Int
    userId           Int
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @default(now()) @updatedAt
}
