model Manga {
    id                 Int               @id @default(autoincrement())
    urlId              String            @unique @default(uuid()) @db.VarChar(255)
    title              MangaTitle?
    description        MangaDescription?
    releaseDate        DateTime?
    type               MangaType         @default(Manga)
    status             BookStatus        @default(Ongoing)
    ageRating          Int               @default(0)
    covers             MangaCovers[]
    owner              User              @relation(fields: [ownerId], references: [id])
    ownerId            Int
    banner             String?
    genres             Int[]
    tags               Int[]
    related            MangaRelated?
    rating             MangaRating[]
    comments           MangaComments[]
    bookmarks          MangaBookmarks[]
    chapters           MangaChapters[]
    statistic          MangaStatistic?
    authors            MangaAuthor[]     @relation("MangaAuthors")
    artists            MangaArtist[]     @relation("MangaArtists")
    publishers         MangaPublisher[]  @relation("MangaPublishers")
    moderated          Boolean           @default(false)
    lastChapterAddedAt DateTime          @default(now())
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @default(now()) @updatedAt
}

model MangaTitle {
    id          Int      @id @default(autoincrement())
    ru          String
    en          String?
    origin      String?
    otherTitles String   @default("")
    book        Manga    @relation(fields: [bookId], references: [id])
    bookId      Int      @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt
}

model MangaDescription {
    id        Int      @id @default(autoincrement())
    ru        String
    en        String?
    book      Manga    @relation(fields: [bookId], references: [id])
    bookId    Int      @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model MangaCovers {
    id        Int      @id @default(autoincrement())
    cover     String
    main      Boolean  @default(false)
    book      Manga    @relation(fields: [bookId], references: [id])
    bookId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model MangaRating {
    rate      Int
    book      Manga    @relation(fields: [bookId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    bookId    Int
    userId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@id([userId, bookId])
}

model MangaComments {
    id            Int                     @id @default(autoincrement())
    content       String
    book          Manga                   @relation(fields: [bookId], references: [id])
    user          User                    @relation(fields: [userId], references: [id])
    bookId        Int
    userId        Int
    usersLike     UserLikeMangaComments[]
    predesessorId Int?
    predecessor   MangaComments?          @relation("MangaCommentsFamily", fields: [predesessorId], references: [id])
    successors    MangaComments[]         @relation("MangaCommentsFamily")
    createdAt     DateTime                @default(now())
    updatedAt     DateTime                @default(now()) @updatedAt
}

model UserLikeMangaComments {
    id            Int           @id @default(autoincrement())
    bookComment   MangaComments @relation(fields: [bookCommentId], references: [id])
    user          User          @relation(fields: [userId], references: [id])
    bookCommentId Int
    userId        Int
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @default(now()) @updatedAt
}

model MangaBookmarks {
    bookmark  Bookmarks      @default(Reading)
    show      Boolean        @default(true)
    user      User           @relation(fields: [userId], references: [id])
    book      Manga          @relation(fields: [bookId], references: [id])
    chapter   MangaChapters? @relation(fields: [chapterId], references: [id]) // ? last readed chapter    
    userId    Int
    bookId    Int
    chapterId Int?
    createdAt DateTime       @default(now())
    updatedAt DateTime       @default(now()) @updatedAt

    @@id([userId, bookId])
}

model MangaStatistic {
    id                Int      @id @default(autoincrement())
    rate              Float    @default(0)
    viewCount         Int      @default(0)
    likeCount         Int      @default(0)
    rateCount         Int      @default(0)
    chapterCount      Int      @default(0)
    bookmarkCount     Int      @default(0)
    rateStatistic     Json     @default("{}")
    bookmarkStatistic Json     @default("{}")
    book              Manga    @relation(fields: [bookId], references: [id])
    bookId            Int      @unique
    createdAt         DateTime @default(now())
    updatedAt         DateTime @default(now()) @updatedAt
}

model MangaRelated {
    id        Int      @id @default(autoincrement())
    manga     Json     @default("{}")
    ranobe    Json     @default("{}")
    book      Manga    @relation(fields: [bookId], references: [id])
    bookId    Int      @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

enum MangaType {
    Manga
    Manhwa
    Manhua
    OEL
    Rumanga
    Comic
}
